package com.jasamedika.medifirst2000.service.impl;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.codec.binary.Base64;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.orm.jpa.JpaSystemException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.jasamedika.medifirst2000.converter.AgamaConverter;
import com.jasamedika.medifirst2000.dao.AgamaDao;
import com.jasamedika.medifirst2000.entities.Agama;
import com.jasamedika.medifirst2000.exception.ServiceVOException;
import com.jasamedika.medifirst2000.service.AgamaService;
import com.jasamedika.medifirst2000.util.CommonUtil;
import com.jasamedika.medifirst2000.vo.AgamaVO;
import com.jasamedika.medifirst2000.vo.TestUploadVO;

@Service("agamaService")
@EnableCaching
public class AgamaServiceImpl extends BaseVoServiceImpl implements AgamaService<AgamaVO> {

	@Autowired
	private AgamaDao agamaDao;

	@Autowired
	public AgamaConverter agamaConverter;

	@Override
	@Transactional(readOnly = false)
	public AgamaVO add(AgamaVO vo) throws JpaSystemException, ServiceVOException {
		Agama agama = agamaConverter.transferVOToModel(vo, new Agama());
		Agama resultModel = agamaDao.save(agama);

		return vo;
	}

	@Override
	@Transactional(readOnly = false)
	public AgamaVO update(AgamaVO vo) throws JpaSystemException, ServiceVOException {
		Agama agama = agamaDao.findOne(vo.getId());
		agama = agamaConverter.transferVOToModel(vo, agama);

		agamaDao.save(agama);
		return vo;

	}

	@Override
	public Boolean delete(Integer key) throws JpaSystemException {
		if (CommonUtil.isNotNullOrEmpty(key)) {
			Agama agama = agamaDao.findOne(key);
			agamaDao.delete(agama);
			return true;
		} else {
			return false;
		}
	}

	@Override
	public AgamaVO findById(Integer key) throws JpaSystemException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<AgamaVO> findAll() throws JpaSystemException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public Map<String, Object> findAllWithPageAndLimitAndSortByAndDirectionParameter(Integer page, Integer limit,
			String sort, String dir) {
		List<AgamaVO> agamaVOList = new ArrayList<AgamaVO>();
		Pageable pageable = new PageRequest(page, limit, getSortBy(sort, dir));
		Page<Agama> resultPage = agamaDao.findAll(pageable);
		List<Agama> ruanganList = resultPage.getContent();

		agamaConverter.transferListOfModelToListOfVO(ruanganList, agamaVOList);

		return constructMapReturn(agamaVOList, resultPage.getTotalElements(), resultPage.getTotalPages());
	}

	@Override
	public List<Agama> findAllAgama() {
		List<Agama> models = (List<Agama>) agamaDao.findAll();
		return models;
	}

	@Override
	@Cacheable(value = "testFindCache", key = "#id")
	public Agama findByIdAgama(Integer id) {
		Agama a = agamaDao.findByIdAgama(id);
		return a;
	}

	private void slowQuery(long seconds) {
		try {
			Thread.sleep(seconds);
		} catch (InterruptedException e) {
			throw new IllegalStateException(e);
		}
	}

	public Agama multipleQuery(Integer id) {
		slowQuery(2000L);
		Agama a = agamaDao.findByIdAgama(id);
		return a;
	}

	@Override
	public Map<String,Object> upload(TestUploadVO vo) throws IOException {
		  byte[] decodedBytes = Base64.decodeBase64(vo.getFileInput());
		  String targetFile="d:/"+vo.getFileName();
	      writeByteArraysToFile(targetFile, decodedBytes);
	      
	      List<Book> listBooks = new ArrayList<>();
	      try {
				
				FileInputStream file = new FileInputStream(new File(targetFile));
				
				//Get the workbook instance for XLS file 
				HSSFWorkbook workbook = new HSSFWorkbook(file);

				//Get first sheet from the workbook
				HSSFSheet sheet = workbook.getSheetAt(0);
				
				//Iterate through each rows from first sheet
				Iterator<Row> rowIterator = sheet.iterator();
				while(rowIterator.hasNext()) {
					Row row = rowIterator.next();
					
					//For each row, iterate through each columns
					Iterator<Cell> cellIterator = row.cellIterator();
					Book aBook = new Book();
					while (cellIterator.hasNext()) {
			            Cell nextCell = cellIterator.next();
			            int columnIndex = nextCell.getColumnIndex();
			 
			            switch (columnIndex) {
			            case 1:
			                aBook.setEmployeeId((String) getCellValue(nextCell));
			                break;
			            case 2:
			                aBook.setName((String) getCellValue(nextCell));
			                break;
			            case 3:
			                aBook.setSalary((String) getCellValue(nextCell));
			                break;
			            }
			 
			 
			        }
			        listBooks.add(aBook);
					System.out.println("");
				}
				file.close();
				
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
	      Map<String,Object>r=new HashMap<String,Object>();
	      r.put("data", listBooks);
		return r;
	}

	
	private Object getCellValue(Cell cell) {
	    switch (cell.getCellType()) {
	    case Cell.CELL_TYPE_STRING:
	        return cell.getStringCellValue();
	 
	    case Cell.CELL_TYPE_BOOLEAN:
	        return cell.getBooleanCellValue();
	 
	    case Cell.CELL_TYPE_NUMERIC:
	        return cell.getNumericCellValue();
	    }
	 
	    return null;
	}
	public static void writeByteArraysToFile(String fileName, byte[] content) throws IOException {

		File file = new File(fileName);
		BufferedOutputStream writer = new BufferedOutputStream(new FileOutputStream(file));
		writer.write(content);
		writer.flush();
		writer.close();

	}

}
